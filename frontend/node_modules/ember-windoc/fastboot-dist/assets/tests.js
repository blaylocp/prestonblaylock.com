define('dummy/tests/acceptance/index-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {

  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | index');

  (0, _qunit.test)('visiting /index', function (assert) {
    visit('/');

    andThen(function () {
      assert.equal(currentURL(), '/');
      assert.equal(this.$('.scroll-height').text(), '' + document.body.scrollHeight, 'Correct scrollHeight');
      assert.equal(this.$('.scroll-width').text(), '' + document.body.scrollWidth, 'Correct scrollWidth');
      var lastScrollB = document.body.scrollHeight - document.documentElement.clientHeight - document.documentElement.scrollTop;
      assert.equal(this.$('.scroll-bottom').text(), '' + lastScrollB, 'Correct scrollBottom');
      assert.equal(this.$('.scroll-right').text(), '' + (document.body.scrollWidth - document.documentElement.clientWidth - document.documentElement.scrollLeft), 'Correct scrollRight');
      assert.equal(this.$('.scroll-top').text(), '' + document.body.scrollTop, 'Correct scrollTop');
    });
  });
});
define('dummy/tests/acceptance/index-test.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - acceptance');
  test('acceptance/index-test.js should pass jscs', function () {
    ok(true, 'acceptance/index-test.js should pass jscs.');
  });
});
define('dummy/tests/acceptance/index-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - acceptance/index-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'acceptance/index-test.js should pass jshint.');
  });
});
define('dummy/tests/app.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - .');
  test('app.js should pass jscs', function () {
    ok(true, 'app.js should pass jscs.');
  });
});
define('dummy/tests/app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app.js should pass jshint.');
  });
});
define('dummy/tests/components/x-position-example.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - components');
  test('components/x-position-example.js should pass jscs', function () {
    ok(true, 'components/x-position-example.js should pass jscs.');
  });
});
define('dummy/tests/components/x-position-example.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/x-position-example.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/x-position-example.js should pass jshint.');
  });
});
define('dummy/tests/components/x-props-example.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - components');
  test('components/x-props-example.js should pass jscs', function () {
    ok(true, 'components/x-props-example.js should pass jscs.');
  });
});
define('dummy/tests/components/x-props-example.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/x-props-example.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/x-props-example.js should pass jshint.');
  });
});
define('dummy/tests/components/x-resize-example.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - components');
  test('components/x-resize-example.js should pass jscs', function () {
    ok(true, 'components/x-resize-example.js should pass jscs.');
  });
});
define('dummy/tests/components/x-resize-example.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/x-resize-example.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/x-resize-example.js should pass jshint.');
  });
});
define('dummy/tests/components/x-scroll-example.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - components');
  test('components/x-scroll-example.js should pass jscs', function () {
    ok(true, 'components/x-scroll-example.js should pass jscs.');
  });
});
define('dummy/tests/components/x-scroll-example.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - components/x-scroll-example.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'components/x-scroll-example.js should pass jshint.');
  });
});
define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = destroyApp;

  function destroyApp(application) {
    _ember['default'].run(application, 'destroy');
  }
});
define('dummy/tests/helpers/destroy-app.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - helpers');
  test('helpers/destroy-app.js should pass jscs', function () {
    ok(true, 'helpers/destroy-app.js should pass jscs.');
  });
});
define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/destroy-app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');
  });
});
define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {
  exports['default'] = function (name) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    (0, _qunit.module)(name, {
      beforeEach: function beforeEach() {
        this.application = (0, _dummyTestsHelpersStartApp['default'])();

        if (options.beforeEach) {
          options.beforeEach.apply(options, arguments);
        }
      },

      afterEach: function afterEach() {
        if (options.afterEach) {
          options.afterEach.apply(options, arguments);
        }

        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);
      }
    });
  };
});
define('dummy/tests/helpers/module-for-acceptance.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - helpers');
  test('helpers/module-for-acceptance.js should pass jscs', function () {
    ok(true, 'helpers/module-for-acceptance.js should pass jscs.');
  });
});
define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/module-for-acceptance.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');
  });
});
define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {

  var resolver = _dummyResolver['default'].create();

  resolver.namespace = {
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix
  };

  exports['default'] = resolver;
});
define('dummy/tests/helpers/resolver.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - helpers');
  test('helpers/resolver.js should pass jscs', function () {
    ok(true, 'helpers/resolver.js should pass jscs.');
  });
});
define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/resolver.js should pass jshint.');
  });
});
define('dummy/tests/helpers/round-float.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - helpers');
  test('helpers/round-float.js should pass jscs', function () {
    ok(true, 'helpers/round-float.js should pass jscs.');
  });
});
define('dummy/tests/helpers/round-float.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/round-float.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/round-float.js should pass jshint.');
  });
});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {
  exports['default'] = startApp;

  function startApp(attrs) {
    var application = undefined;

    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);
    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    _ember['default'].run(function () {
      application = _dummyApp['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }
});
define('dummy/tests/helpers/start-app.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - helpers');
  test('helpers/start-app.js should pass jscs', function () {
    ok(true, 'helpers/start-app.js should pass jscs.');
  });
});
define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/start-app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/start-app.js should pass jshint.');
  });
});
define('dummy/tests/resolver.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - .');
  test('resolver.js should pass jscs', function () {
    ok(true, 'resolver.js should pass jscs.');
  });
});
define('dummy/tests/resolver.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'resolver.js should pass jshint.');
  });
});
define('dummy/tests/router.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - .');
  test('router.js should pass jscs', function () {
    ok(true, 'router.js should pass jscs.');
  });
});
define('dummy/tests/router.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - router.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'router.js should pass jshint.');
  });
});
define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {

  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);
});
define('dummy/tests/test-helper.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - .');
  test('test-helper.js should pass jscs', function () {
    ok(true, 'test-helper.js should pass jscs.');
  });
});
define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - test-helper.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'test-helper.js should pass jshint.');
  });
});
define('dummy/tests/unit/services/windoc-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {

  (0, _emberQunit.moduleFor)('service:windoc', 'Unit | Service | windoc', {
    // Specify the other units that are required for this test.
    // needs: ['service:foo']
  });

  (0, _emberQunit.test)('it exists', function (assert) {
    var service = this.subject();
    assert.ok(service);
  });

  (0, _emberQunit.test)('adds a single resize and a single scroll event listener', function (assert) {
    var eventCounts = { total: 0 };
    var canceledId = null;

    var service = this.subject({
      w: {
        addEventListener: function addEventListener(evtType) {
          eventCounts[evtType] = (eventCounts[evtType] || 0) + 1;
          eventCounts.total++;
        },
        setInterval: function setInterval() {
          return 123;
        },
        clearInterval: function clearInterval(x) {
          canceledId = x;
        }
      }
    });

    assert.equal(eventCounts.resize, 1, 'One resize listener');
    assert.equal(eventCounts.scroll, 1, 'One scroll listener');
    assert.equal(eventCounts.total, 2, 'Three total listeners');
    service._cancelRefreshPollLoop();
    assert.equal(canceledId, 123, 'canceling poll task clears interval');
  });

  (0, _emberQunit.test)('retrieves basic properties from correct places', function (assert) {
    var service = this.subject({
      w: {
        document: {
          documentElement: {
            clientHeight: 21,
            clientWidth: 231,
            scrollTop: 221,
            scrollLeft: 121,
            scrollHeight: 83,
            scrollWidth: 14
          }
        },
        addEventListener: function addEventListener() {},
        setInterval: function setInterval() {},
        clearInterval: function clearInterval() {}
      }
    });

    assert.equal(service.get('clientHeight'), 21, 'clientHeight');
    assert.equal(service.get('clientWidth'), 231, 'clientWidth');
    assert.equal(service.get('scrollTop'), 221, 'scrollTop');
    assert.equal(service.get('scrollLeft'), 121, 'scrollLeft');
    assert.equal(service.get('scrollHeight'), 83, 'scrollHeight');
    assert.equal(service.get('scrollWidth'), 14, 'scrollWidth');
  });

  (0, _emberQunit.test)('retrieves secondary properties from correct places', function (assert) {
    var service = this.subject({
      w: {
        document: {
          documentElement: {
            clientHeight: 50,
            clientWidth: 100,
            scrollTop: 25,
            scrollLeft: 40,
            scrollHeight: 100,
            scrollWidth: 200
          }
        },
        addEventListener: function addEventListener() {},
        setInterval: function setInterval() {},
        clearInterval: function clearInterval() {}
      }
    });

    assert.equal(service.get('scrollRight'), 60, 'scrollRight');
    assert.equal(service.get('scrollBottom'), 25, 'scrollBottom');

    assert.equal(service.get('scrollHRatio'), 0.4, 'scrollHRatio');
    assert.equal(service.get('scrollVRatio'), 0.5, 'scrollVRatio');
  });
});
define('dummy/tests/unit/services/windoc-test.jscs-test', ['exports'], function (exports) {
  'use strict';

  module('JSCS - unit/services');
  test('unit/services/windoc-test.js should pass jscs', function () {
    ok(true, 'unit/services/windoc-test.js should pass jscs.');
  });
});
define('dummy/tests/unit/services/windoc-test.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - unit/services/windoc-test.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/services/windoc-test.js should pass jshint.');
  });
});
/* jshint ignore:start */

require('dummy/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;

/* jshint ignore:end */
//# sourceMappingURL=tests.map